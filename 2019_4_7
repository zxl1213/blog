进程间通信:
	基本操作
	操作系统提供的---进程间的几种通信方式
	管道(命名管道/匿名管道)
	SYSTEM V标准的进程间通信
	共享内存
	消息队列(选学)
	信息量(选学)
基本介绍:
	进程的独立性---因为进程独立,因此想要通信必须能够共同访问同一媒介
	进程间通信目的(数据传输,数据共享,进程间访问控制)
	通信目的不同,使用场景不同,因此操作系统提供了多种方式
	管道(命名/匿名)---(传输数据)
	共享内存---(共享数据)
	消息队列---(传输数据)
	信号量----(进程间访问控制)
管道:---进程间数据传输
	半双工管道---
	原理:内核的一块缓冲区
	匿名管道:pipe,只能用于具有亲缘关系的进程间通信	
	int pipe(int pipe[2]);
	int pipefd[2]
	pipefd[1]---从管道读数据
	pipefd[2]---从给管道写数据
读写特性:
	若管道中没有数据,则read会阻塞,直到读到数据返回
	若管道中数据满了,则write会阻塞,知道数据被读取,管道中有空闲位置,写入数据后返回
	bc 计算器
	若管道所有的读端都被关闭,则write会触发异常--SIGPIPE---导致进程退出,通知用户没人读
	若管道所有的写端都被关闭,则read读完数据后,返回0,通知用户没人写
	管道自带同步与互斥特性,当读写大小小于PIPE_BUF时保证操作原子性,操作不可被打断
		互斥:保证对临界资源同一时间的唯一访问性		
		同步:保证对临界资源访问的时序可控性
	管道是一个半双工通信(可选择方向的单向通信)
	管道声明周期随进程
	ps -ef | grep ssh中|匿名通信
命名管道:可见于文件系统,因为创建命名管道会随之在文件系统中创建一个命名管道
	因为所有的进程都能通过打开管道文件,进而获取管道的操作句柄,
	因此命名管道可以用于同一主机上任意进程间通信
	管道的原理依然是内核的缓冲区,只是通过文件向所有进程都提供了能够访问管道的方法
命名管道的打开特性
	若管道没有被以读的方式打开,这是如果只写打开则会阻塞,直到文件被以读的方式打开
	若管道没有被以写的方式打开,这是如果只读打开则会阻塞,直到文件被以写的方式打开
	若管道以读写方式打开,则不会阻塞
读写特性与匿名管道相同
