文件系统:linux ext2
	每个分区都有文件系统
	文件,
	inode(inode bitmap):大小,权限,用户,时间,块位置
	位图(位置,data bitmap)
	存储文件流程:通过inode bitmap中找到空闲的inode结点
				 通过data_bitmap在数据块区域找到空闲数据块,将数据快位置信息,记录到inode结点中,
				 将文件数据写入数据块中;将文件名和inode节点号写入父目录文件中
				 目录文件中,存放一张目录下有什么文件的表,表中记录了(文件名,inode节点号)--目录项
	cat ./a.txt流程,在当前目录中查找文件名信息,通过文件名获取inode节点号,
		  			通过inode结点号找到inode节点,进而访问数据块,获取数据进行打印
软链接/硬链接:创建硬链接 ln a.txt .hard,一个文件的另一个名字,与原文件没有什么区别,与源文件文件inode相同
				删除源文件,硬链接无影响(通过inode结点号找文件只是连接数-1)
			  创建软链接ln -s a.txt a.soft,独立文件,源文件的快捷方式与原文件inode不同
			    删除源文件,软链接失效(通过记录的源文件路径名查找源文件数据)
			  软连接可以跨分区建立,硬链接不可以
			  软链接文件可以对目录进行创建,硬链接不可以
静态库/动态库:生成和使用
	生成动态库gcc -fPIC -c a.c -o a.o
				.so动态库后缀  
	生成静态库gcc -c b.c -o b.o         ar -cr b.o libmytest.so
				.a静态库后缀
		-fPIC产生位置无关代码   课后调研
		--share生成共享库:gcc 
		-L 指定库的搜索路径
		-l 指定连接库的名称
		-I 指定头文件搜索路径
	ar 静态库打包所用命令
	  -c 创建
	  -r 替换
	  :vnew b.c
	ctrl +ww,光标跳转
	库的使用(链接)
	gcc a.c -o main -lmytest 报错,找不到库(链接时找不到库----库的查找路径)
	库文件的默认路径/lib64    /usr/lib64
	设置环境变量:LIBRARY_PATH.(库的链接路径)
	使用选项:-L
	
	因为gcc默认是动态链接--因此默认使用动态库生成可执行程序
	./main 运行报错----找不到库(运行时找不到库----库的加载路径)
		库文件的默认路径/lib64    /usr/lib64
	设置环境变量:LD_LIBRARY_PATH.(库的运行加载路径)
	链接静态库生成可执行程序并不使用static ,而是将静态库放到指定路径下,直接gcc -L链接静态库,生成动态库
	gcc a.c -o main -L/.mytest -static   (所有库都是静态库)
